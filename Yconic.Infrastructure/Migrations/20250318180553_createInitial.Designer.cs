// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Yconic.Infrastructure.ApplicationDbContext;

#nullable disable

namespace Yconic.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250318180553_createInitial")]
    partial class createInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Yconic.Domain.Models.Clothe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("SuggestionsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SuggestionsId");

                    b.ToTable("Clothes");
                });

            modelBuilder.Entity("Yconic.Domain.Models.ClotheCategories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GarderobeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("GarderobeId");

                    b.ToTable("ClotheCategories");
                });

            modelBuilder.Entity("Yconic.Domain.Models.ClothePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClotheId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClotheId");

                    b.ToTable("ClothePhotos");
                });

            modelBuilder.Entity("Yconic.Domain.Models.Garderobe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Garderobes");
                });

            modelBuilder.Entity("Yconic.Domain.Models.Persona", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Usertype")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("Yconic.Domain.Models.Suggestions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("Yconic.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric");

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserGarderobeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserPersonaId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Yconic.Domain.Models.Clothe", b =>
                {
                    b.HasOne("Yconic.Domain.Models.ClotheCategories", "Category")
                        .WithMany("Clothes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yconic.Domain.Models.Suggestions", null)
                        .WithMany("SuggestedLook")
                        .HasForeignKey("SuggestionsId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Yconic.Domain.Models.ClotheCategories", b =>
                {
                    b.HasOne("Yconic.Domain.Models.Garderobe", "Garderobe")
                        .WithMany("ClothesCategory")
                        .HasForeignKey("GarderobeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garderobe");
                });

            modelBuilder.Entity("Yconic.Domain.Models.ClothePhoto", b =>
                {
                    b.HasOne("Yconic.Domain.Models.Clothe", "Clothe")
                        .WithMany("Photos")
                        .HasForeignKey("ClotheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clothe");
                });

            modelBuilder.Entity("Yconic.Domain.Models.Garderobe", b =>
                {
                    b.HasOne("Yconic.Domain.Models.User", "User")
                        .WithOne("UserGarderobe")
                        .HasForeignKey("Yconic.Domain.Models.Garderobe", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yconic.Domain.Models.Persona", b =>
                {
                    b.HasOne("Yconic.Domain.Models.User", "User")
                        .WithOne("UserPersona")
                        .HasForeignKey("Yconic.Domain.Models.Persona", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yconic.Domain.Models.Suggestions", b =>
                {
                    b.HasOne("Yconic.Domain.Models.User", "User")
                        .WithMany("Suggestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yconic.Domain.Models.Clothe", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Yconic.Domain.Models.ClotheCategories", b =>
                {
                    b.Navigation("Clothes");
                });

            modelBuilder.Entity("Yconic.Domain.Models.Garderobe", b =>
                {
                    b.Navigation("ClothesCategory");
                });

            modelBuilder.Entity("Yconic.Domain.Models.Suggestions", b =>
                {
                    b.Navigation("SuggestedLook");
                });

            modelBuilder.Entity("Yconic.Domain.Models.User", b =>
                {
                    b.Navigation("Suggestions");

                    b.Navigation("UserGarderobe");

                    b.Navigation("UserPersona");
                });
#pragma warning restore 612, 618
        }
    }
}
